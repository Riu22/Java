package Juego;

import java.util.Random;
import java.util.Scanner;

public class Historia {
    public static void jugarModoHistoria(Jugador jugador, Scanner sc) {
        try{
            Thread.sleep(2000);
            System.out.println("\nüåë Un mundo olvidado te espera...");
            System.out.println("Te despiertas en las ruinas de un reino ca√≠do. Ecos de batallas antiguas resuenan en el viento.");
            System.out.println("El cielo est√° oscurecido, como si la esperanza misma hubiera abandonado este lugar.");
            System.out.println("Una voz susurra: \"Solo los dignos recuerdan su prop√≥sito...\"\n");
            Thread.sleep(3000);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        // üî• Primer combate (derrota asegurada)
        System.out.println("\n‚öîÔ∏è Pere Negre(El profesor de programaci√≥n) aparece ante ti...");
        Enemigo Pere_Negre = getEnemigoAleatorio(100);
        Pere_Negre.aumentarAtributos(200, 50, 30, 20);

        System.out.println("\nüíÄ En tu estado actual, no tienes oportunidad...");
        batallaDerrota(jugador, Pere_Negre);
        try{
            Thread.sleep(2000);
            // üìñ Narrativa despu√©s de perder
            System.out.println("\nüåô Oscuridad... Sientes que caes en un abismo sin fin.");
            System.out.println("...");
            System.out.println("‚õ∫ Despiertas en una humilde aldea, rodeado de naturaleza. Un anciano te observa desde una silla de madera.");
            System.out.println("\"Has visto la verdad... El Rey Maldito no permitir√° que nadie desaf√≠e su reinado.\"");
            System.out.println("\"Si realmente deseas luchar, necesitar√°s m√°s poder. Encuentra la llama olvidada, solo ella podr√° restaurar tu fuerza.\"");
            System.out.println("El anciano te entrega un medall√≥n. \"Este ser√° tu gu√≠a en el camino, pero debes ser sabio con tus elecciones...\"");
            System.out.println("\nüî• ¬°Has obtenido un aumento de poder!");
            jugador.ganarExperiencia(100);
            jugador.setvida(jugador.getVida() + 50);
            System.out.println("\nüíñ El medall√≥n brilla y un poder oculto te sana. Has recuperado algo de vida.");
            Thread.sleep(4000);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        // ‚öîÔ∏è Segundo combate
        if (!batallaHistoria(jugador, sc, "Hechicero del Abismo", getEnemigoAleatorio(4))) return;

        // üèûÔ∏è Exploraci√≥n en la b√∫squeda de la llama olvidada
        System.out.println("\nüåø Sigues el sendero marcado por el medall√≥n. El bosque se vuelve m√°s oscuro y misterioso.");
        System.out.println("Un crujido de ramas te hace voltear. Un extra√±o ser aparece en tu camino...");
        System.out.println("Es un guardi√°n del bosque que te desaf√≠a a una prueba de sabidur√≠a.");
        System.out.println("\"¬øQu√© har√°s?\"");
        System.out.println("1. Aceptar la prueba.");
        System.out.println("2. Atacar al guardi√°n.");
        System.out.println("Elige sabiamente.");

        int opcion = obtenerOpcion(sc);
        sc.nextLine(); // Limpia el buffer de entrada si antes usaste nextInt()

        if (opcion == 1) {
            System.out.println("\nüí° Aceptas la prueba de sabidur√≠a del guardi√°n.");
            System.out.println("\nLa pregunta es la siguiente: ¬øCu√°l es el animal que en la ma√±ana camina en 4 patas,\n" +
                    "al mediod√≠a en 2 y en la noche con 3?");

            String respuesta = sc.nextLine().trim();

            if (respuesta.equalsIgnoreCase("Humano") || respuesta.equalsIgnoreCase("El Humano") || respuesta.equalsIgnoreCase("el humano")) {
                jugador.ganarExperiencia(50);
                jugador.setvida(jugador.getVida() + 30); // Incremento de vida
                System.out.println("\nüíñ El guardi√°n te da un elixir que mejora tus habilidades.");
            } else {
                System.out.println("\n‚ùå Respuesta incorrecta. El guardi√°n te desaf√≠a a un combate.");
                if (!batallaHistoria(jugador, sc, "Artem Rudenko (El Guardi√°n del Bosque)", getEnemigoAleatorio(4))) return;
                jugador.ganarExperiencia(100);
            }
        } else {
            System.out.println("\n‚öîÔ∏è Decides luchar contra el guardi√°n. Tras un arduo combate, lo derrotas.");
            if (!batallaHistoria(jugador, sc, "Artem Rudenko (El Guardi√°n del Bosque)", getEnemigoAleatorio(4))) return;
            jugador.ganarExperiencia(100);
        }


        // ‚öîÔ∏è Jefe final
        if (!batallaHistoria(jugador, sc, "Rey Maldito", getEnemigoAleatorio(3))) return;

        // üé≠ Final del juego
        System.out.println("\nüëë Has vencido al Rey Maldito. Su corona se quiebra y el reino comienza a sanar.");
        System.out.println("Pero la pregunta permanece: ¬øEres el h√©roe del renacer... o solo un nuevo tirano?");
        System.out.println("üé≠ Fin del modo historia.");
    }

    // üî• M√©todo para el primer combate que el jugador debe perder
    private static void batallaDerrota(Jugador jugador, Enemigo enemigo) {
        System.out.println("\n‚öîÔ∏è El" + enemigo.getClase() + " es demasiado poderoso...");
        System.out.println("Tu coraz√≥n late r√°pidamente. Sabes que este ser√° un combate desigual.");
        while (jugador.getVida() > 0) {
            Juego.jugadorTurno(new Scanner(System.in), jugador, enemigo);
            if (jugador.getVida() > 0) {
                enemigo.atacar(jugador);
                if (jugador.getVida() > 0) {
                    jugador.setvida(0);
                }
            }
        }
        try {
            Thread.sleep(2000);
            System.out.println("\nüíÄ Has sido derrotado sin remedio...");
            System.out.println("Tu cuerpo cae al suelo... y la oscuridad te envuelve.");
            System.out.println("Sin embargo, antes de perder el conocimiento, ves una luz brillante al horizonte...");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }

    // üîÑ M√©todo normal para las batallas del modo historia
    private static boolean batallaHistoria(Jugador jugador, Scanner sc, String nombreEnemigo, Enemigo enemigo) {
        System.out.println("\n‚öîÔ∏è " + nombreEnemigo + " aparece ante ti...");
        enemigo.mostrarAtributos();

        while (jugador.getVida() > 0 && enemigo.getVida() > 0) {
            Juego.jugadorTurno(sc, jugador, enemigo);
            if (enemigo.getVida() > 0) {
                enemigo.atacar(jugador);
            }
        }

        if (jugador.getVida() > 0) {
            System.out.println("\n‚ú® " + nombreEnemigo + " ha sido derrotado.");
            jugador.ganarExperiencia(50 * enemigo.getLVL());
            jugador.mostrarAtributos();
            return true;
        } else {
            System.out.println("\nüíÄ Has sido derrotado por " + nombreEnemigo + ". El ciclo contin√∫a...");
            System.out.println("üïØÔ∏è Fin del modo historia.");
            return false;
        }
    }

    private static Enemigo getEnemigoAleatorio(int nivel) {
        Random rand = new Random();
        int claseIndex = rand.nextInt(4);

        Enemigo enemigo;

        switch (claseIndex) {
            case 0:
                enemigo = new Enemigo.Asesino(nivel);
                break;
            case 1:
                enemigo = new Enemigo.Mago(nivel);
                break;
            case 2:
                enemigo = new Enemigo.Dragon(nivel);
                break;
            case 3:
                enemigo = new Enemigo.Caballero(nivel);
                break;
            default:
                enemigo = new Enemigo.Mago(nivel);
                break;
        }

        enemigo.mejorarAtributos(nivel);

        return enemigo;
    }

    // üìú M√©todo para obtener la opci√≥n del jugador en decisiones
    private static int obtenerOpcion(Scanner sc) {
        int opcion = 0;
        while (opcion < 1 || opcion > 2) {
            try {
                System.out.print("Elige una opci√≥n: ");
                opcion = sc.nextInt();
            } catch (Exception e) {
                System.out.println("‚ùå Entrada no v√°lida. Ingresa un n√∫mero del 1 al 2.");
                sc.nextLine();
            }
        }
        return opcion;
    }
}
